openapi: 3.0.0
info:
  title: Online Store API
  description: It exposes a RESTful API that will be used by the frontend developer
  version: 1.0.0
servers:
  - url: 'http://localhost:5000'
components:
  schemas:
    User:
      type: object
      required:
        - user_name
        - first_name
        - last_name
        - email
        - password
        - address
        - phone
      properties: null
      user_id:
        type: string
        format: uuid
      user_name:
        type: string
        maxLength: 50
      first_name:
        type: string
        maxLength: 50
      last_name:
        type: string
        maxLength: 50
      password:
        type: string
        minLength: 8
        maxLength: 16
        description: 'Must contain a number, does''t contain common word like [''123'', ''password'', ''god'']'
      email:
        type: string
        format: email
      address:
        type: string
        maxLength: 255
      phone:
        type: string
        maxLength: 50
        description: The mobile phone number must be supplied with the country code and therefore must start with "+".
      register_date:
        type: Date
        description: auto-generated current date of the user registration
      role:
        type: string
        description: admin or user
      status:
        type: string
        description: 'active, deactivated, suspended'
      example:
        email: ahm@yahoo.com
        user_name: ahmedelking
        first_name: ahmed
        last_name: saad
        password: asssss1234
        phone: '+201001656805'
        address: '15 Shobra St,Cairo,Egypt'
  Error:
    type: object
    properties: null
    statusCode:
      type: integer
    messageData:
      type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  UnauthorizedError:
    description: Unauthorized
    content:
      application/json:
        schema:
          $ref: '#/components/Error'
        example:
          status: 401
          message: 'Login error:please try again'
paths:
  /users/create:
    post:
      summary: Create new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: json object
                properties:
                  statusCode:
                    type: integer
                  data:
                    type: object
                    properties:
                      user_id:
                        type: string
                        format: uuid
                      user_name:
                        type: string
                      email:
                        type: string
                        format: email
                      role:
                        type: string
                      token:
                        type: jwt token
                      status:
                        type: string
                  message:
                    type: string
                    description: user created successfully
              example:
                statusCode: 200
                data:
                  user_id: b7a12419-d9e7-4c7c-964b-982dcf3ad097
                  user_name: ahmedelking
                  email: ahm@yahoo.com
                  role: user
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InVzZXJfaWQiOiJlYjdiNjEyNC01N2FmLTQ2MWItOTA5OC0xYzA5MjNlMmUwMmIiLCJ1c2VyX25hbWUiOiJhaG1lZGVsa2luZyIsImZpcnN0X25hbWUiOiJhaG1lZCIsImxhc3RfbmFtZSI6InNhYWQiLCJlbWFpbCI6ImFobUB5YWhvby5jb20ifSwiaWF0IjoxNjU0NDU5MzU2fQ.rl6oZ_qMO7gqnB7suB-SJHPM5AvZLxaxERzSeaq8Fbo
                  status: active
                messageData: user created successfully
        '400':
          description: unable create user
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                statusCode: 400
                messageData: User name is required
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                statusCode: 500
                messageData: unable create user + error
  '/users/show/{userId}':
    get:
      summary: Returns a user by ID.
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to return.
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: json object
                properties:
                  statusCode:
                    type: string
                    description: 200
                  data:
                    type: object
                    properties:
                      user_name:
                        type: string
                      first_name:
                        type: string
                      last_name:
                        type: string
                      email:
                        type: string
                        format: email
                      address:
                        type: string
                      phone:
                        type: string
                  messageData:
                    type: string
                    description: user retrieved successfully
              example:
                statusCode: 200
                data:
                  user_name: ahmedelking
                  first_name: ahmed
                  last_name: saad
                  email: ahm@yahoo.com
                  address: '15 Shobra St,Cairo,Egypt'
                  phone: 201001656803
                messageData: user retrieved successfully
        '401':
          $ref: '#/components/UnauthorizedError'
        default:
          description: unable show user
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                statusCOde: 400
                messageData: unable show user + error
  '/users/update/{userId}':
    patch:
      summary: Update user information.
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to return.
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: json object
                properties:
                  statusCode:
                    type: integer
                  data:
                    type: object
                    properties:
                      user_id:
                        type: string
                        format: uuid
                      user_name:
                        type: string
                      email:
                        type: string
                        format: email
                      role:
                        type: string
                      token:
                        type: jwt token
                      status:
                        type: string
                  message:
                    type: string
                    description: user updated successfully
              example:
                statusCode: 200
                data:
                  user_id: b7a12419-d9e7-4c7c-964b-982dcf3ad097
                  user_name: elking
                  email: ahm@yahoo.com
                  role: user
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InVzZXJfaWQiOiJlYjdiNjEyNC01N2FmLTQ2MWItOTA5OC0xYzA5MjNlMmUwMmIiLCJ1c2VyX25hbWUiOiJhaG1lZGVsa2luZyIsImZpcnN0X25hbWUiOiJhaG1lZCIsImxhc3RfbmFtZSI6InNhYWQiLCJlbWFpbCI6ImFobUB5YWhvby5jb20ifSwiaWF0IjoxNjU0NDU5MzU2fQ.rl6oZ_qMO7gqnB7suB-SJHPM5AvZLxaxERzSeaq8Fbo
                  status: active
                messageData: user updated successfully
        '400':
          description: Failed to update user
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                statusCode: 400
                messageData: Last name should be alphabetic characters
        '401':
          $ref: '#/components/UnauthorizedError'
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                statusCode: 500
                messageData: Failed to update user + error
  '/users/delete/{userId}':
    delete:
      summary: Delete user by ID.
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to return.
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: json object
                properties:
                  statusCode:
                    type: integer
                  data:
                    type: object
                    properties:
                      user_id:
                        type: string
                        format: uuid
                      user_name:
                        type: string
                      email:
                        type: string
                        format: email
                      role:
                        type: string
                      token:
                        type: jwt token
                      status:
                        type: string
                  message:
                    type: string
                    description: user updated successfully
              example:
                statusCode: 200
                data:
                  user_id: b7a12419-d9e7-4c7c-964b-982dcf3ad097
                  user_name: elking
                  email: ahm@yahoo.com
                  role: user
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InVzZXJfaWQiOiJlYjdiNjEyNC01N2FmLTQ2MWItOTA5OC0xYzA5MjNlMmUwMmIiLCJ1c2VyX25hbWUiOiJhaG1lZGVsa2luZyIsImZpcnN0X25hbWUiOiJhaG1lZCIsImxhc3RfbmFtZSI6InNhYWQiLCJlbWFpbCI6ImFobUB5YWhvby5jb20ifSwiaWF0IjoxNjU0NDU5MzU2fQ.rl6oZ_qMO7gqnB7suB-SJHPM5AvZLxaxERzSeaq8Fbo
                  status: active
                messageData: user deleted successfully
        '401':
          $ref: '#/components/UnauthorizedError'
        default:
          description: unable show user
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                statusCOde: 400
                messageData: unable delete user + error
